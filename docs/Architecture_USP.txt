# Architecture + USP — guided by your vision

Short, direct plan that shows **how KLANS will be different** and the architecture needed to deliver that uniqueness.


## Vision reminder (one line)

A discoverable, hyperlocal + interest-first community platform with real-time engagement, events, threaded discussions, rich member profiles, and frictionless onboarding — a communities-first product that blends discovery (Zomato), depth (Reddit), events (Meetup), chat (Telegram/WhatsApp), and local experiences (Airbnb Experiences).

---

## Unique Selling Points (USPs) — what will set KLANS apart

1. **Category × Type matrix** — Klans are queryable by *type* (Local / Interest / Private) **and** *category* (Pooling, Sports, Learning, etc.), enabling powerful cross-cutting discovery.
2. **Hyperlocal route-aware pooling & schedule model** — first-class support for multi-location pools (Delhi↔Chandigarh), schedules (daily, weekly, adhoc), seat management and dynamic matching.
3. **Discovery engine tuned for locality + intent** — combine geospatial, temporal (events today), activity signals, and interest graph for recommendations.
4. **Real-time + persistent threaded discussions** — chat for live coordination + durable forum-style threads (both first-class).
5. **Micro-experiences** — short, bookable local experiences inside Klans (paid/free), surfaced by location & reputation.
6. **Privacy-first membership patterns** — easy-private joins, ephemeral identities for events, granular admin controls, local verification badges.
7. **Lightweight mobile-web-first approach** — single responsive web app optimized for PWA/renderer wrapper for app stores; fast on low bandwidth.
8. **Composable category extensions** — categories can define custom fields (Pooling: source/dest; Sports: skill level). Schema-first but extensible.

---

## High-level architecture (component map)

* **Frontend**

  * Next.js (React) WebApp (PWA) — responsive + SSR for SEO
  * Lightweight wrappers for Android/iOS (Capacitor or Tauri/renderer)
  * Realtime client using WebSocket / WebRTC for calls
* **API / Gateway**

  * GraphQL (recommended) or REST gateway — single entry that orchestrates microservices
* **Microservices**

  * Auth & Profiles (OAuth, phone, SSO)
  * Klan Management (CRUD, category logic, permissions)
  * Posts & Threads (threaded discussions, rich media)
  * Chat / Realtime (presence, typing, ephemeral messages)
  * Events & Bookings (RSVP, tickets, seat limits)
  * Pooling Engine (route management, schedule, matching)
  * Notifications (push, mail, SMS)
  * Search & Recommendations (search + ranking)
  * Moderation & Trust (reports, safety workflows, verification)
  * Payments (wallets, paid events, txn history)
* **Data & Storage**

  * Primary DB: Document store (MongoDB / DynamoDB) for flexible clan schemas
  * Relational store for transactional needs (Postgres) — payments, bookings
  * Search: Elasticsearch / OpenSearch — geo + full-text + facets
  * Realtime state: Redis (streams / pubsub) + Redis Geo for quick geospatial lookups
  * Object storage: S3-compatible
* **Realtime**

  * WebSocket cluster (socket.io / Phoenix Channels / Centrifugo) or Firebase Realtime for MVP
  * Use Redis Pub/Sub for multi-instance sync
* **Infrastructure & Ops**

  * Kubernetes (or managed ECS/EKS) + autoscaling
  * CDN for media
  * Observability: Prometheus, Grafana, ELK
  * CI/CD pipelines (feature branches → preview → canary)
* **Third-party integrations**

  * SMS/OTP (Twilio/Msg91), Email (Sendgrid), Maps (Mapbox / Google Maps), Payments (Razorpay / Stripe), Identity verification (Aadhaar-lite vendors where legal / optional)

---

## Data & schema considerations (high level)

* **Klan** = base model + category extension fields

  * base: id, name, description, type, categoryId, visibility, createdBy, location(s), tags, stats
  * category metadata: JSON schema per category (validates extra fields)
* **User** = profiles + privacy layers + reputation

  * multiple handles (display, ephemeral), verifiedLocations, joinedKlans, badges, activityScore
* **Post** = threadId, parentId, content, attachments, pinned, visibility
* **Event** = klanId, title, schedule, location, capacity, fees, ticketingStatus
* **Pool** (special object) = route {waypoints}, recurrence, seats, rideOwner, matchingRules
* **Chat** = conversationId, members, ephemeralFlag, retentionPolicy
* **Audit / Moderation logs** — immutable for trust & legal

---

## Real-time & offline UX

* Presence, live typing, read receipts, live event updates (RSVP changes), seat counters for pooling.
* Offline-first UI for low-bandwidth: optimistic writes, local queue, background sync.
* Notifications prioritized: transactional (booking/cancel) > mentions > digests.

---

## Discovery & Recommendation approach

* **Signals:** location proximity, event imminence, mutual connections, interests, activity recency, category affinity, paid/verified status.
* **Pipeline:** realtime ingestion → feature store (user vectors) → ranking model (lightweight ML initially; rules + collaborative filtering) → personalized feed.
* **Search UX:** faceted search: category → subcategory → type → frequency → location radius → next event date.

---

## Moderation, Safety & Trust

* Tiered moderation: community moderators + platform admins + automated moderation (NLP filters + image scanning).
* Reputation & friction: new users limited initially; higher trust unlocks features (create public klans, host paid experiences).
* Reporting & appeals workflow with audit logs.

---

## Scalability & cost control

* Design hot paths for realtime chat & discovery with horizontally scalable services (stateless API servers, Redis for state).
* Use tiered storage (hot/cold) for media.
* Feature flags for throttling heavy features (live video, large media uploads).

---

## MVP scope (prioritized)

1. Auth, User profile, Onboarding (location + interests)
2. Create / Discover / Join Klans (with Category × Type support)
3. Posts (threaded) + simple Chat (1:1 & Klan rooms)
4. Events (create + RSVP)
5. Pooling: minimal route + schedule + seat booking (core value)
6. Basic Search (text + geo) + Recommendations (rules-based)
7. Notifications (push & email) + moderation basics
8. Web PWA + wrappers for mobile

---

## Phase 2+ (post-MVP)

* Advanced recommendations (ML), bookings/payments for experiences, verified badges, ads/sponsored Klans, advanced analytics for admins, mobile-first native features (offline maps, turn-by-turn for pooling), white-label Klans (enterprise).

---

## Key success metrics (to measure USP)

* DAU / MAU (local engagement per city)
* #Klans created per category
* Time-to-first-RSVP / time-to-first-join
* Pool match success rate (seats filled)
* Retention 7/30-day by onboarding cohort
* Avg events per Klan / messages per Klan per week
* Report rate & moderation resolution time

---
